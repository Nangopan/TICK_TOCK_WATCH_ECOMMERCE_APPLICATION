<main class="main-wrap">
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                   
                    <div class="card-body">
                        <form method="post" class="form-add-product" action="/admin/updateProduct/{{productData._id}}"
                              enctype="multipart/form-data" onsubmit="return Validation(event)">

                            <!-- Product Name -->
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" value="{{productData.name}}" placeholder="Type here" name="name"
                                       class="form-control" id="productName">
                                <h6 class="alertAddProduct mt-1" style="color: red" id="productNameAlert"></h6>
                            </div>

                            <!-- Full Description -->
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" name="description" id="longdescription"
                                          class="form-control" rows="3">{{productData.description}}</textarea>
                                <h6 class="alertAddProduct mt-1" style="color: red" id="longAlert"></h6>
                            </div>

                            <div class="row">
                                <!-- Price -->
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Price</label>
                                        <input placeholder="$" type="text" value="{{productData.price}}" id="price"
                                               name="price" class="form-control">
                                        <h6 class="alertAddProduct mt-1" style="color: red" id="priceAlert"></h6>
                                    </div>
                                </div>

                                <!-- Stock -->
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input name="stock" value="{{productData.stock}}" class="form-control"
                                               placeholder="Quantity" type="text" id="Qty">
                                        <h6 class="alertAddProduct mt-1" style="color: red" id="qtyAlert"></h6>
                                    </div>
                                </div>

                                <!-- Category -->
                                <div class="col-lg-4">
                                    <label class="form-label">Category:</label>
                                    <select name="category" id="category" class="form-select">
                                        {{#each categories}}
                                        <option value="{{this._id}}" {{#if this.isSelected}}selected{{/if}}>{{this.category}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>

                            <!-- Product Images -->
                            <div class="form-group">
                                <label for="productImage">Product Image:</label>
                                <div class="d-flex border p-10 m-tb-10">
                                    <input name="product-id" type="hidden" value="{{productData._id}}" >
                                 {{#each productData.imageUrl}}
    <div class="image-container" data-image-index="{{@index}}">
        <div class="badge rounded-pill alert-danger">
            <p class="close-button" data-image-index="{{@index}}" onclick="deleteProImg({{@index}})" style="cursor: pointer;">×</p>
        </div>
        <img src="/assets/imgs/products/{{this}}" alt="images" style="width: 80px; height: auto;" class="m-2 pro-image" data-image-index="{{@index}}">
    </div>
{{/each}}

                                </div>
                                <input type="file" class="form-control-file" id="productImage" multiple name="image">
                                <h6 id="imgAlert" class="mt-2" style="color: red;"></h6>
                            </div>
                            





                            <!-- Buttons -->
                            <div class="d-flex g-2">
                                <div class="m-2">
<button onclick="return Validation(event);" class="btn btn-primary">Save</button>

                                </div>
                                <div class="m-2">
                                    <a href="/admin/product" type="button" class="btn btn-primary" id="backbutton">Back</a>
                                </div>
                            </div> 





                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Footer -->
    <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
            <div class="col-sm-6">
                <script>
                    document.write(new Date().getFullYear());
                </script> ©, Tick Tock.
            </div>
            <div class="col-sm-6">
                <div class="text-sm-end">
                    All rights reserved.
                </div>
            </div>
        </div>
    </footer>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>


<!-- Cropper.js CSS (Required) -->
<link  href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

<!-- Cropper.js JS (Required) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>




<script>


document.addEventListener("DOMContentLoaded", function () {
    const fileInput = document.getElementById("productImage");
    let cropper = null; // Global reference

    fileInput.addEventListener("change", function (event) {
        const files = event.target.files;
        if (files.length > 0) {
            handleImageCrop(files[0]);
        }
    });

    function handleImageCrop(file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            showCropModal(e.target.result);
        };
        reader.readAsDataURL(file);
    }

    function showCropModal(imageSrc) {
        Swal.fire({
            title: "Crop Image",
            html: `<div style="max-width: 100%; max-height: 400px; overflow: hidden;">
                <img id="cropImage" style="max-width: 100%; max-height: 400px;"/>
            </div>`,
            showCancelButton: true,
            confirmButtonText: "Crop & Upload",
            didOpen: () => {
                setTimeout(() => {
                    const image = document.getElementById("cropImage");

                    if (!image) {
                        Swal.showValidationMessage("Image element not found.");
                        return;
                    }

                    image.src = imageSrc; // Assign src before initializing Cropper

                    image.onload = () => {
                        if (cropper) {
                            cropper.destroy();
                        }
                        cropper = new Cropper(image, {
                            aspectRatio: 1,
                            viewMode: 2,
                            autoCropArea: 1,
                        });
                    };
                }, 100); // Delay ensures modal has rendered before accessing elements
            },
            preConfirm: () => {
                return new Promise((resolve) => {
                    if (!cropper) {
                        Swal.showValidationMessage("Cropper not initialized.");
                        return resolve(false);
                    }

                    cropper.getCroppedCanvas().toBlob((blob) => {
                        if (blob) {
                            resolve(blob);
                        } else {
                            Swal.showValidationMessage("Failed to crop image.");
                            resolve(false);
                        }
                    }, "image/jpeg");
                });
            }
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                replaceFileInput(result.value);
            }
        });
    }

    function replaceFileInput(blob) {
        const dataTransfer = new DataTransfer();
        const newFile = new File([blob], "cropped_image.jpg", { type: "image/jpeg" });

        dataTransfer.items.add(newFile);

        if (fileInput) {
            fileInput.files = dataTransfer.files;
            Swal.fire({
                title: "Success",
                text: "Cropped image ready for upload!",
                icon: "success",
            });
        } else {
            Swal.fire({
                title: "Error",
                text: "File input not found!",
                icon: "error",
            });
        }
    }
});




function Validation(event) {
    event.preventDefault(); // Prevent form submission
    let errors = []; // Array to store validation errors

    const fileInput = document.getElementById('productImage');
    const productName = document.getElementById("productName").value.trim();
    const longdescription = document.getElementById("longdescription").value.trim();
    const Qty = document.getElementById("Qty").value.trim();
    const price = document.getElementById("price").value.trim();

    // Regular expressions for validation
    const productNameRegex = /^[a-zA-Z0-9\s\(\)\-\+]{4,}$/;
    const number = /^[1-9]\d*$/;
    const number1 = /^[0-9]\d*$/;
    const descriptionRegex = /^(?!\s*$)[a-zA-Z0-9\s\(\)\-\+]{10,100}$/;


    // Alert elements
    const productNameAlert = document.getElementById("productNameAlert");
    const qtyAlert = document.getElementById("qtyAlert");
    const priceAlert = document.getElementById("priceAlert");
    const longAlert = document.getElementById("longAlert");
    const imgAlert = document.getElementById('imgAlert');

    // Reset previous alerts
    productNameAlert.innerHTML = "";
    qtyAlert.innerHTML = "";
    priceAlert.innerHTML = "";
    longAlert.innerHTML = "";
    imgAlert.innerHTML = "";

    // Validate Product Name
  if (productName.length < 4) {
        productNameAlert.innerHTML = "minimum 4 characters.";
        errors.push("Invalid Product Name");
    } else if (!productName.match(productNameRegex)) {
        productNameAlert.innerHTML = "Invalid Name";
        errors.push("Invalid Product Name");
    }
    // Validate Quantity
    if (!Qty.match(number1)) {
        qtyAlert.innerHTML = "Stock Invalid";
        errors.push("Invalid Quantity");
    }

    // Validate Price
    if (!price.match(number)) {
        priceAlert.innerHTML = "Price Invalid.";
        errors.push("Invalid Price");
    }

    // Validate Description
    if (!longdescription.match(descriptionRegex)) {
        longAlert.innerHTML = "minimum 10 characters";
        errors.push("Invalid Description");
    }

    // Validate Images
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif'];
    const invalidFileTypes = ['application/pdf'];
    if (fileInput && fileInput.files.length > 0) {
        for (let i = 0; i < fileInput.files.length; i++) {
            const fileType = fileInput.files[i].type;
            if (invalidFileTypes.includes(fileType)) {
                imgAlert.innerHTML = "PDF files are not allowed.";
                errors.push("Invalid Image Type");
                break;
            } else if (!validImageTypes.includes(fileType)) {
                imgAlert.innerHTML = "Invalid file type. Only jpg, png, gif allowed.";
                errors.push("Invalid Image Format");
                break;
            }
        }
    }

    // Check maximum images
    const existingImagesCount = document.querySelectorAll('.pro-image').length;
    const newImagesCount = fileInput.files.length;
    const totalImagesCount = existingImagesCount + newImagesCount;

    if (totalImagesCount > 5) {
        imgAlert.innerHTML = "Only 5 images are allowed.";
        errors.push("Exceeded Image Limit");
    }

    // If errors exist, prevent form submission
    if (errors.length > 0) {
        console.log("Validation errors:", errors);
        return false;
    }

    // If validation passed, submit the form
    submitform(document.querySelector('.form-add-product'));

    return true; // Allow form submission
}



function submitform(form) {
        
    
    Swal.fire({
        title: "Do you want to save the changes?",
        //text: "Changes made will be saved.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#088178",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, save it!",
        cancelButtonText: "No, cancel"
    
    }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                    title: "Saved",
                    //text: "Your changes have been saved.",
                    icon: "success",
                    //confirmButtonText: "OK"
                    confirmButtonText: "Yes, save it!",
                    timer: 1500 
                }).then(() => {
                    form.submit();
                });
                }else {
               
                console.log("User canceled the action");
            }
            }); 
        }
    

    // Back Button

    $(document).ready(function () {
        $('#backbutton').click(function (e) {
            e.preventDefault();

            Swal.fire({
                title: "Leave the page?",
                text: "The Data will not be saved",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#088178",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/admin/product";

                }
            });
            
        });
    });



const deleteImage = async (productId, imageIndex) => {
    try {
        const response = await fetch(`/admin/product_img_delete?id=${productId}&image=${imageIndex}`, {
            method: 'DELETE'
        });

        const data = await response.json();
        console.log("hei",data);

        if (data) {
    const imageElem = document.querySelector(`.pro-image[data-image-index="${imageIndex}"]`);
    const imageContainer = document.querySelector(`.image-container[data-image-index="${imageIndex}"]`);
    console.log("Image Element:", imageContainer); // Log the image element
    if (imageElem) {
        imageContainer.remove()
    } else {
        console.warn("Image element not found for index:", imageIndex); // Warn if element is not found
    }
} else {
    console.warn("No data received from the server.");
}

    } catch (error) {
        console.error(error);
    }
};

const deleteProImg = () => {
    const deleteButtons = document.querySelectorAll('.close-button');
    const productId = document.getElementsByName('product-id')[0].value;
    console.log('product ID=> ' , productId)
    deleteButtons.forEach((button) => {
        button.addEventListener('click', async (event) => {
            const imageIndex = event.target.dataset.imageIndex;
            await deleteImage(productId, imageIndex);
        });
    });
};

// Call deleteProImg once the DOM is loaded
document.addEventListener("DOMContentLoaded", deleteProImg);

</script>





